 testDynamics = async () => {
    return Word.run(async context => {
      //*************************************************************************************** */
      var serverUrl = "https://pacts360-dev01.crm.microsoftdynamics.us/";

      //window.location.href = serverUrl;
      //var OrgServicePath = "https://pacts360-dev01.api.crm.microsoftdynamics.us/XRMServices/2011/Organization.svc";
      console.log(serverUrl);

      //This will establish a more unique namespace for functions in this library. This will reduce the
      // potential for functions to be overwritten due to a duplicate name when the library is loaded.

      var requestMain = "";
      requestMain += '<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">';
      requestMain += "  <s:Body>";
      requestMain +=
        '    <Execute xmlns="http://schemas.microsoft.com/xrm/2011/Contracts/Services" xmlns:i="http://www.w3.org/2001/XMLSchema-instance">';
      requestMain +=
        '      <request i:type="b:WhoAmIRequest" xmlns:a="http://schemas.microsoft.com/xrm/2011/Contracts" xmlns:b="http://schemas.microsoft.com/crm/2011/Contracts">';
      requestMain +=
        '        <a:Parameters xmlns:c="http://schemas.datacontract.org/2004/07/System.Collections.Generic" />';
      requestMain += '        <a:RequestId i:nil="true" />';
      requestMain += "        <a:RequestName>WhoAmI</a:RequestName>";
      requestMain += "      </request>";
      requestMain += "    </Execute>";
      requestMain += "  </s:Body>";
      requestMain += "</s:Envelope>";
      var req = new XMLHttpRequest();
      req.open("POST", serverUrl, true);
      // Responses will return XML. It isn't possible to return JSON.
      req.setRequestHeader("Accept", "application/xml, text/xml, */*");
      req.setRequestHeader("Content-Type", "text/xml; charset=utf-8");
      req.setRequestHeader(
        "SOAPAction",
        "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Execute"
      );

      req.onreadystatechange = function() {
        if (this.readyState === 4) {
          req.onreadystatechange = null;
          if (this.status === 200) {
            var results = JSON.parse(this.response);
            console.log("Justin Response ", results);
          } else {
            console.log("Error in App.tsx");
            console.log(JSON.parse(this.response));
          }
        }
      };
      req.send(requestMain);

      /*******************************************************************************************************/
      await context.sync();
    });
  };